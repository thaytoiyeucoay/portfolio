"use client";

import { useEffect, useMemo, useRef, useState } from "react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Badge } from "@/components/ui/badge";
import { Separator } from "@/components/ui/separator";
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip";
import { cn } from "@/lib/utils";
import { ExternalLink, Paperclip, Upload, Search, Send, Sparkles, FileText, Settings, Plus, Trash2, RefreshCw, Link as LinkIcon, BookOpen, Info, Quote, Copy, Check, Volume2, Square, Bot } from "lucide-react";
// eslint-disable-next-line import/no-unresolved
import ReactMarkdown from "react-markdown";
import remarkGfm from "remark-gfm";
import rehypePrism from "rehype-prism-plus";
import Image from "next/image";

export const dynamic = 'force-dynamic';

export default function ChatbotRagPage() {
  // Chat state (UI-only)
  const [messages, setMessages] = useState<Array<{ id: string; role: "user" | "assistant"; content: string; citations?: Array<{ title: string; url?: string; snippet?: string }>; }>>([
    {
      id: "m1",
      role: "assistant",
      content: "Xin ch√†o! T√¥i l√† tr·ª£ l√Ω AI c√° nh√¢n c·ªßa Kh√°nh Duy B√πi. T√¥i c√≥ th·ªÉ tr·∫£ l·ªùi c√°c c√¢u h·ªèi v·ªÅ kinh nghi·ªám, k·ªπ nƒÉng, d·ª± √°n v√† th√¥ng tin chuy√™n m√¥n c·ªßa anh ·∫•y. B·∫°n c≈©ng c√≥ th·ªÉ t·∫£i l√™n t√†i li·ªáu ƒë·ªÉ t√¥i ph√¢n t√≠ch v√† tr·∫£ l·ªùi d·ª±a tr√™n n·ªôi dung ƒë√≥.",
      citations: [
        { title: "Th√¥ng tin c√° nh√¢n", snippet: "AI Engineer v·ªõi kinh nghi·ªám ph√°t tri·ªÉn c√°c h·ªá th·ªëng AI/ML, chuy√™n v·ªÅ NLP v√† Computer Vision..." },
      ],
    },
  ]);
  const [input, setInput] = useState("");
  const [sending, setSending] = useState(false);
  const [allowWeb, setAllowWeb] = useState(false);
  const [copiedId, setCopiedId] = useState<string | null>(null);
  const [copiedCode, setCopiedCode] = useState<string | null>(null);

  // TTS state
  const [ttsEnabled, setTtsEnabled] = useState(false);
  const [voices, setVoices] = useState<SpeechSynthesisVoice[]>([]);
  const [ttsVoice, setTtsVoice] = useState<SpeechSynthesisVoice | null>(null);
  const [speakingId, setSpeakingId] = useState<string | null>(null);
  const [ttsRate, setTtsRate] = useState(1);
  const [preferFemale, setPreferFemale] = useState<boolean>(() => {
    try { return localStorage.getItem("tts_prefer_female_vi") === "1" || true; } catch { return true; }
  });

  // Helpers: persist selected voice and friendly label
  function extractVariantName(v: SpeechSynthesisVoice) {
    const raw = `${v.name}`;
    // Try to extract Vietnamese proper name after brand keywords
    const mMs = /Microsoft\s+([A-Za-z√Ä-·ªπ]+)[^A-Za-z√Ä-·ªπ]?/i.exec(raw);
    if (mMs?.[1]) return mMs[1];
    const mGg = /Google\s+([A-Za-z√Ä-·ªπ]+)[^A-Za-z√Ä-·ªπ]?/i.exec(raw);
    if (mGg?.[1]) return mGg[1];
    // Clean parentheses content and generic terms
    const cleaned = raw.replace(/\([^)]*\)/g, "").replace(/[‚Äì\-]/g, " ");
    const blacklist = new Set(["Microsoft","Google","Vietnamese","Vietnam","Online","Natural","Desktop","Voice","Standard","Neural"]);
    const cand = cleaned.split(/\s+/).filter(Boolean).find(tok => !blacklist.has(tok) && /[A-Za-z√Ä-·ªπ]/.test(tok));
    return cand || "";
  }

  async function onAskWeb() {
    if (!input.trim()) return;
    setSending(true);
    const userContent = input + " (y√™u c·∫ßu t√¨m ki·∫øm web)";
    const userMsg = { id: crypto.randomUUID(), role: "user" as const, content: userContent };
    setMessages((prev) => [...prev, userMsg]);
    setInput("");

    try {
      const res = await fetch("/api/chat", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ message: userContent, forceWeb: true, allowWeb })
      });
      const data = await res.json();
      if (!res.ok || !data?.success) throw new Error(data?.message || "Chat API error");

      const payload = data.data as {
        answer: string;
        sources: Array<{ title: string; content: string; source: string; similarity: number }>;
        searchUsed: boolean;
      };
      const citations = (payload.sources || []).map((s) => ({
        title: s.title,
        url: /^https?:\/\//i.test(s.source) ? s.source : undefined,
        snippet: s.content,
      }));
      const assistantMsg = {
        id: crypto.randomUUID(),
        role: "assistant" as const,
        content: payload.answer,
        citations,
      };
      setMessages((prev) => [...prev, assistantMsg]);
    } catch (e) {
      console.error(e);
      const errMsg = {
        id: crypto.randomUUID(),
        role: "assistant" as const,
        content: "Xin l·ªói anh, em g·∫∑p l·ªói khi t√¨m ki·∫øm web. Anh th·ª≠ l·∫°i gi√∫p em v·ªõi nh√©. üôè",
      };
      setMessages((prev) => [...prev, errMsg]);
    } finally {
      setSending(false);
    }
  }

  function friendlyVoiceName(v: SpeechSynthesisVoice, withVariant = true) {
    const raw = `${v.name}`;
    const isGoogle = /google/i.test(raw);
    const isMS = /microsoft/i.test(raw);
    const lower = raw.toLowerCase();
    const gender = /female|nu|n·ªØ/.test(lower) ? "N·ªØ" : /male|nam/.test(lower) ? "Nam" : "T·ª± nhi√™n";
    const brand = isGoogle ? "Google" : isMS ? "Microsoft" : "H·ªá th·ªëng";
    const variant = withVariant ? extractVariantName(v) : "";
    return `${gender} ‚Äì ${brand}${variant ? ` ¬∑ ${variant}` : ""}`;
  }

  function saveVoiceURI(uri: string | null) {
    try { if (uri) localStorage.setItem("tts_voice_uri_vi", uri); } catch {}
  }

  function getSavedVoiceURI(): string | null {
    try { return localStorage.getItem("tts_voice_uri_vi"); } catch { return null; }
  }

  function pickDefaultViVoice(viOnly: SpeechSynthesisVoice[], preferFemaleFlag: boolean) {
    if (viOnly.length === 0) return null;
    const isFemale = (v: SpeechSynthesisVoice) => {
      const n = (v.name || "").toLowerCase();
      // Common indicators in various engines
      const keywords = ["female", "nu", "n·ªØ", "female", "woman", "w"];
      const vietnameseNamesLikelyFemale = ["hoaimy", "linh", "trang", "mai", "thao", "thu", "hoa", "anh"];
      return keywords.some(k => n.includes(k)) || vietnameseNamesLikelyFemale.some(k => n.includes(k));
    };
    const priority = (v: SpeechSynthesisVoice) => (/google/i.test(v.name) ? 2 : /microsoft/i.test(v.name) ? 1 : 0);
    if (preferFemaleFlag) {
      const females = viOnly.filter(isFemale);
      if (females.length > 0) {
        females.sort((a, b) => priority(b) - priority(a));
        return females[0];
      }
    }
    // no female found, fallback to overall priority
    const sorted = [...viOnly].sort((a, b) => priority(b) - priority(a));
    return sorted[0];
  }

  // KB state (UI-only)
  const [docs, setDocs] = useState<Array<{ name: string; sizeKB: number }>>([
    { name: "product-guide.pdf", sizeKB: 842 },
    { name: "faq.md", sizeKB: 16 },
  ]);
  const [temperature, setTemperature] = useState(0.2);

  const fileInputRef = useRef<HTMLInputElement | null>(null);
  const chatEndRef = useRef<HTMLDivElement | null>(null);

  // Load voices (Web Speech API)
  useEffect(() => {
    if (typeof window === "undefined" || !("speechSynthesis" in window)) return;
    const synth = window.speechSynthesis;

    function scoreVoice(v: SpeechSynthesisVoice) {
      const name = (v.name || "").toLowerCase();
      let score = 0;
      if (v.lang?.toLowerCase().startsWith("vi")) score += 10; // ch·ªâ Vi·ªát Nam
      if (name.includes("google")) score += 4;
      if (name.includes("microsoft")) score += 3;
      if (name.includes("natural")) score += 2;
      if (name.includes("female") || name.includes("nu")) score += 1;
      return score;
    }

    function pickViVN(all: SpeechSynthesisVoice[]) {
      // L·ªçc ch·ªâ gi·ªçng ti·∫øng Vi·ªát v√† s·∫Øp x·∫øp theo "ƒë·ªô hay" heuristic
      const viList = all.filter((v) => v.lang?.toLowerCase().startsWith("vi"));
      if (viList.length === 0) return null;
      viList.sort((a, b) => scoreVoice(b) - scoreVoice(a));
      return viList[0] || null;
    }

    const load = () => {
      const list = synth.getVoices();
      const viOnly = list.filter((v) => v.lang?.toLowerCase().startsWith("vi"));
      viOnly.sort((a, b) => scoreVoice(b) - scoreVoice(a));
      setVoices(viOnly);
      if (!ttsVoice && viOnly.length) {
        const saved = getSavedVoiceURI();
        const found = saved ? viOnly.find((v) => v.voiceURI === saved) : null;
        const best = found || pickDefaultViVoice(viOnly, preferFemale);
        if (best) {
          setTtsVoice(best);
          saveVoiceURI(best.voiceURI);
        }
      }
    };

    // M·ªôt s·ªë tr√¨nh duy·ªát load voice b·∫•t ƒë·ªìng b·ªô
    load();
    if (typeof synth.onvoiceschanged !== "undefined") {
      synth.onvoiceschanged = load;
    }
  }, [ttsVoice]);

  // persist whenever voice changes
  useEffect(() => {
    if (ttsVoice?.voiceURI) saveVoiceURI(ttsVoice.voiceURI);
  }, [ttsVoice?.voiceURI]);

  useEffect(() => {
    chatEndRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [messages.length, sending]);

  // Speak latest assistant message automatically
  // T·∫Øt auto TTS: ch·ªâ ƒë·ªçc khi ng∆∞·ªùi d√πng b·∫•m v√†o n√∫t √¢m thanh c·ªßa t·ª´ng tin nh·∫Øn
  useEffect(() => { /* no auto-speak */ }, [messages]);

  const disabled = useMemo(() => sending || !input.trim(), [sending, input]);

  function onAttach() {
    fileInputRef.current?.click();
  }

  function speak(id: string, text: string, force = false) {
    if (!force && !ttsEnabled) return;
    if (typeof window === "undefined" || !("speechSynthesis" in window)) return;
    const synth = window.speechSynthesis;
    try {
      synth.cancel();
      const u = new SpeechSynthesisUtterance(text);
      u.lang = ttsVoice?.lang || "vi-VN";
      if (ttsVoice) u.voice = ttsVoice;
      u.rate = ttsRate;
      u.pitch = 1;
      u.onend = () => setSpeakingId((prev) => (prev === id ? null : prev));
      setSpeakingId(id);
      synth.speak(u);
    } catch (e) {
      // noop
    }
  }

  function stopSpeaking() {
    if (typeof window === "undefined" || !("speechSynthesis" in window)) return;
    window.speechSynthesis.cancel();
    setSpeakingId(null);
  }

  function previewVoice(v: SpeechSynthesisVoice | null, text = "Xin ch√†o, m√¨nh l√† tr·ª£ l√Ω AI c·ªßa Kh√°nh Duy.") {
    if (!v) return;
    if (typeof window === "undefined" || !("speechSynthesis" in window)) return;
    try {
      const synth = window.speechSynthesis;
      synth.cancel();
      const u = new SpeechSynthesisUtterance(text);
      u.lang = v.lang || "vi-VN";
      u.voice = v;
      u.rate = ttsRate;
      u.pitch = 1;
      synth.speak(u);
    } catch {}
  }

  function refreshVoices() {
    if (typeof window === "undefined" || !("speechSynthesis" in window)) return;
    const synth = window.speechSynthesis;
    const list = synth.getVoices();
    const viOnly = list.filter((vv) => vv.lang?.toLowerCase().startsWith("vi"));
    // Simple priority: Google > Microsoft > others
    const priority = (name: string) => name.includes("Google") ? 2 : name.includes("Microsoft") ? 1 : 0;
    viOnly.sort((a, b) => priority((b.name||"")) - priority((a.name||"")));
    setVoices(viOnly);
    if (!ttsVoice && viOnly.length) setTtsVoice(viOnly[0]);
  }

  function onUploadFiles(files: FileList | null) {
    if (!files || files.length === 0) return;
    const form = new FormData();
    Array.from(files).forEach((f) => form.append("files", f));
    // Optimistic UI: show files immediately
    const newDocs = Array.from(files).map((f) => ({ name: f.name, sizeKB: Math.max(1, Math.round(f.size / 1024)) }));
    setDocs((prev) => [...newDocs, ...prev]);
    fetch("/api/documents", { method: "POST", body: form })
      .then((r) => r.json())
      .then((res) => {
        if (!res?.success) throw new Error(res?.message || "Upload failed");
        // no-op: docs already appended; could refresh stats from res.data
      })
      .catch((e) => {
        // Revert optimistic on failure
        setDocs((prev) => prev.filter((d) => !newDocs.some((nd) => nd.name === d.name && nd.sizeKB === d.sizeKB)));
        console.error("Upload error", e);
        alert("T·∫£i t√†i li·ªáu th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i.");
      });
  }

  async function onAsk() {
    if (!input.trim()) return;
    setSending(true);
    const userContent = input;
    const userMsg = { id: crypto.randomUUID(), role: "user" as const, content: userContent };
    setMessages((prev) => [...prev, userMsg]);
    setInput("");

    try {
      const res = await fetch("/api/chat", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ message: userContent, allowWeb })
      });
      const data = await res.json();
      if (!res.ok || !data?.success) throw new Error(data?.message || "Chat API error");

      const payload = data.data as {
        answer: string;
        sources: Array<{ title: string; content: string; source: string; similarity: number }>;
        searchUsed: boolean;
      };
      const citations = (payload.sources || []).map((s) => ({
        title: s.title,
        url: /^https?:\/\//i.test(s.source) ? s.source : undefined,
        snippet: s.content,
      }));
      const assistantMsg = {
        id: crypto.randomUUID(),
        role: "assistant" as const,
        content: payload.answer,
        citations,
      };
      setMessages((prev) => [...prev, assistantMsg]);
    } catch (e) {
      console.error(e);
      const errMsg = {
        id: crypto.randomUUID(),
        role: "assistant" as const,
        content: "Xin l·ªói anh, em g·∫∑p l·ªói khi x·ª≠ l√Ω y√™u c·∫ßu. Anh th·ª≠ l·∫°i gi√∫p em v·ªõi nh√©. üôè",
      };
      setMessages((prev) => [...prev, errMsg]);
    } finally {
      setSending(false);
    }
  }

  async function initRag() {
    try {
      const res = await fetch("/api/init", { method: "POST" });
      const data = await res.json();
      if (!res.ok || !data?.success) throw new Error(data?.message || "Init failed");
      alert(`Kh·ªüi t·∫°o tri th·ª©c c√° nh√¢n th√†nh c√¥ng (chunks: ${data.data?.personalDataChunks || 0})`);
    } catch (e) {
      console.error(e);
      alert("Kh·ªüi t·∫°o th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i.");
    }
  }

  function onClearChat() {
    setMessages([]);
  }

  function copyMessage(id: string, text: string) {
    navigator.clipboard.writeText(text).then(() => {
      setCopiedId(id);
      setTimeout(() => setCopiedId(null), 1200);
    });
  }

  function copyCode(code: string) {
    navigator.clipboard.writeText(code).then(() => {
      setCopiedCode(code);
      setTimeout(() => setCopiedCode(null), 1200);
    });
  }

  return (
    <div className="relative container mx-auto max-w-6xl px-4 py-10">
      <div className="mb-6 flex flex-col items-start justify-between gap-4 sm:flex-row sm:items-center">
        <div>
          <h1 className="bg-gradient-to-r from-emerald-400 via-teal-400 to-sky-400 bg-clip-text text-3xl font-bold text-transparent flex items-center gap-3">
            <div className="relative">
              <Bot className="h-8 w-8 text-emerald-400" />
              <div className="absolute -top-1 -right-1 h-3 w-3 bg-green-400 rounded-full animate-pulse" />
            </div>
            Tr·ª£ l√Ω AI c·ªßa Kh√°nh Duy
          </h1>
          <p className="text-sm text-muted-foreground mt-2">
            Xin ch√†o! T√¥i l√† tr·ª£ l√Ω AI c√° nh√¢n c·ªßa Kh√°nh Duy B√πi. H√£y h·ªèi t√¥i v·ªÅ kinh nghi·ªám, k·ªπ nƒÉng, d·ª± √°n ho·∫∑c b·∫•t k·ª≥ ƒëi·ªÅu g√¨ b·∫°n mu·ªën bi·∫øt.
          </p>
        </div>
        <div className="flex items-center gap-2">
          <Button variant="outline" size="sm" onClick={onClearChat}>
            <Trash2 className="mr-2 size-4" /> Xo√° h·ªôi tho·∫°i
          </Button>
          <Button
            variant={ttsEnabled ? "secondary" : "outline"}
            size="sm"
            onClick={() => setTtsEnabled((v) => !v)}
            title="B·∫≠t/T·∫Øt ƒë·ªçc to c√¢u tr·∫£ l·ªùi"
          >
            <Volume2 className="mr-2 size-4" /> √Çm thanh: {ttsEnabled ? "B·∫≠t" : "T·∫Øt"}
          </Button>
          <Button variant="secondary" size="sm" asChild>
            <a href="/" className="gap-2 inline-flex items-center">
              Trang ch·ªß <ExternalLink className="size-4" />
            </a>
          </Button>
        </div>
      </div>

      <div className="grid grid-cols-1 gap-6 lg:grid-cols-3">
        {/* Left: Knowledge Base & Settings */}
        <div className="space-y-6 lg:col-span-1">
          <Card className="border-white/10 backdrop-blur-md bg-white/5 shadow-xl">
            <CardHeader>
              <CardTitle className="text-base flex items-center gap-2"><BookOpen className="size-4" /> Knowledge Base</CardTitle>
              <CardDescription>T·∫£i t√†i li·ªáu ƒë·ªÉ l√†m ngu·ªìn tri th·ª©c cho RAG.</CardDescription>
            </CardHeader>
            <CardContent className="space-y-3">
              <div className="grid grid-cols-2 gap-2 sm:flex sm:flex-wrap sm:items-center">
                <Input type="file" className="hidden" multiple ref={fileInputRef} onChange={(e) => onUploadFiles(e.target.files)} />
                <Button size="sm" onClick={onAttach}><Upload className="mr-2 size-4" /> T·∫£i file</Button>
                <Button size="sm" variant="outline"><LinkIcon className="mr-2 size-4" /> Th√™m URL</Button>
                <Button size="sm" variant="ghost" title="Re-index"><RefreshCw className="size-4" /></Button>
                <Button size="sm" variant="secondary" onClick={initRag} title="Kh·ªüi t·∫°o tri th·ª©c c√° nh√¢n t·ª´ h·ªì s∆° c·ªßa anh">
                  <Sparkles className="mr-2 size-4" /> Kh·ªüi t·∫°o tri th·ª©c
                </Button>
              </div>
              <div className="rounded-md border border-white/10 bg-white/5 backdrop-blur-sm overflow-hidden">
                <div className="flex items-center justify-between px-3 py-2 text-xs text-muted-foreground bg-white/5">
                  <span className="font-medium">{docs.length} t√†i li·ªáu</span>
                  <span className="font-medium">T·ªïng ~{docs.reduce((a, b) => a + b.sizeKB, 0)}KB</span>
                </div>
                <Separator />
                <div className="max-h-56 overflow-auto">
                  {docs.map((d, i) => (
                    <div key={i} className="flex items-center justify-between px-3 py-2 text-sm hover:bg-white/5 transition-colors group">
                      <div className="flex items-center gap-2">
                        <FileText className="size-4 text-muted-foreground group-hover:text-emerald-400 transition-colors" />
                        <span className="truncate" title={d.name}>{d.name}</span>
                      </div>
                      <span className="text-xs text-muted-foreground font-medium">{d.sizeKB}KB</span>
                    </div>
                  ))}
                </div>
              </div>
            </CardContent>
          </Card>

          <Card className="border-white/10 backdrop-blur-md bg-white/5 shadow-xl">
            <CardHeader>
              <CardTitle className="text-base flex items-center gap-2"><Settings className="size-4" /> C·∫•u h√¨nh</CardTitle>
              <CardDescription>Tu·ª≥ ch·ªânh gi·ªçng ƒë·ªçc v√† tham s·ªë.</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="space-y-2">
                <label className="text-xs text-muted-foreground">Nhi·ªát ƒë·ªô: {temperature.toFixed(1)}</label>
                <input
                  type="range"
                  min={0}
                  max={1}
                  step={0.1}
                  value={temperature}
                  onChange={(e) => setTemperature(parseFloat(e.target.value))}
                  className="w-full"
                />
              </div>

              <div className="space-y-2">
                <label className="text-xs text-muted-foreground">Gi·ªçng ƒë·ªçc (Ti·∫øng Vi·ªát)</label>
                <div className="flex items-center justify-between gap-2">
                  <div className="text-sm">
                    {ttsVoice ? friendlyVoiceName(ttsVoice) : "Ch∆∞a c√≥ gi·ªçng Vi·ªát"}
                  </div>
                  <Badge variant="secondary">ƒêang s·ª≠ d·ª•ng</Badge>
                </div>
                <div className="flex gap-2">
                  <Button size="sm" variant="outline" onClick={() => previewVoice(ttsVoice)}>Nghe th·ª≠</Button>
                  <Button size="sm" variant="ghost" onClick={refreshVoices}>L√†m m·ªõi</Button>
                </div>
                {voices.length === 0 && (
                  <div className="text-[11px] text-muted-foreground">M·∫πo: H√£y b·∫≠t g√≥i gi·ªçng ƒë·ªçc ti·∫øng Vi·ªát c·ªßa h·ªá ƒëi·ªÅu h√†nh/tr√¨nh duy·ªát ƒë·ªÉ s·ª≠ d·ª•ng TTS.</div>
                )}
                {/* Selector v√† danh s√°ch gi·ªçng ƒë√£ ·∫©n theo y√™u c·∫ßu */}
              </div>

              <div className="space-y-2">
                <label className="text-xs text-muted-foreground">T·ªëc ƒë·ªô ƒë·ªçc: {ttsRate.toFixed(1)}x</label>
                <input
                  type="range"
                  min={0.5}
                  max={1.5}
                  step={0.1}
                  value={ttsRate}
                  onChange={(e) => setTtsRate(parseFloat(e.target.value))}
                  className="w-full"
                />
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Right: Chat */}
        <div className="space-y-6 lg:col-span-2">
          <Card className="border-white/10">
            <CardHeader>
              <div className="flex items-center justify-between">
                <div>
                  <CardTitle className="text-base flex items-center gap-2">
                    <Sparkles className="size-4" /> Tr·ª£ l√Ω ·∫£o c·ªßa Kh√°nh Duy B√πi
                  </CardTitle>
                  <CardDescription>H·ªèi ƒë√°p d·ª±a tr√™n ngu·ªìn ki·∫øn th·ª©c ƒë√£ t·∫£i l√™n.</CardDescription>
                </div>
                <div className="hidden gap-2 sm:flex items-center">
                  <Button size="sm" variant={allowWeb ? "default" : "outline"} onClick={() => setAllowWeb((v) => !v)}>
                    <Search className="mr-2 size-4" /> {allowWeb ? "Web search: B·∫≠t" : "Web search: T·∫Øt"}
                  </Button>
                </div>
              </div>
            </CardHeader>
            <Separator />
            <CardContent className="p-0">
              <div className="h-[540px] w-full overflow-auto p-4">
                <div className="mx-auto max-w-3xl space-y-4">
                  {messages.map((m) => (
                    <div key={m.id} className={cn("flex w-full gap-3", m.role === "user" ? "justify-end" : "justify-start")}>
                      {m.role === "assistant" && (
                        <div className="mt-1">
                          <ChatAvatar talking={false} />
                        </div>
                      )}
                      <div className={cn(
                        "max-w-[82%] rounded-2xl border p-3 text-sm shadow-sm backdrop-blur-sm transition-colors",
                        m.role === "assistant"
                          ? "border-emerald-500/20 bg-gradient-to-br from-emerald-500/10 to-teal-500/10"
                          : "border-sky-500/20 bg-gradient-to-br from-sky-500/10 to-indigo-500/10"
                      )}>
                        <div className="prose prose-invert max-w-none whitespace-pre-wrap leading-relaxed [&_*]:break-words">{m.content}</div>
                        {m.citations && m.citations.length > 0 && (
                          <div className="mt-3 space-y-2">
                            <div className="text-xs font-medium text-muted-foreground">Tr√≠ch d·∫´n</div>
                            <div className="grid gap-2 sm:grid-cols-2">
                              {m.citations.map((c, i) => (
                                <div key={i} className="rounded-md border border-white/10 p-3">
                                  <div className="mb-1 flex items-center gap-2 text-xs font-medium">
                                    <FileText className="size-4" /> {c.title}
                                  </div>
                                  {c.snippet && (
                                    <div className="text-xs text-muted-foreground line-clamp-3">{c.snippet}</div>
                                  )}
                                  {c.url && (
                                    <div className="mt-2 text-xs">
                                      <a className="inline-flex items-center gap-1 underline decoration-dotted" href={c.url} target="_blank" rel="noreferrer">
                                        M·ªü ngu·ªìn <ExternalLink className="size-3" />
                                      </a>
                                    </div>
                                  )}
                                </div>
                              ))}
                            </div>
                          </div>
                        )}
                        <div className="mt-2 flex justify-end">
                          <TooltipProvider>
                            <Tooltip>
                              <TooltipTrigger asChild>
                                <Button size="icon" variant="ghost" className="h-7 w-7" onClick={() => copyMessage(m.id, m.content)}>
                                  {copiedId === m.id ? <Check className="size-4" /> : <Copy className="size-4" />}
                                </Button>
                              </TooltipTrigger>
                              <TooltipContent side="left">Sao ch√©p</TooltipContent>
                            </Tooltip>
                          </TooltipProvider>
                          {m.role === "assistant" && (
                            <TooltipProvider>
                              <Tooltip>
                                <TooltipTrigger asChild>
                                  <Button
                                    size="icon"
                                    variant="ghost"
                                    className="h-7 w-7"
                                    onClick={() => (speakingId === m.id ? stopSpeaking() : speak(m.id, m.content, true))}
                                  >
                                    {speakingId === m.id ? <Square className="size-4" /> : <Volume2 className="size-4" />}
                                  </Button>
                                </TooltipTrigger>
                                <TooltipContent side="left">{speakingId === m.id ? "D·ª´ng" : "ƒê·ªçc to"}</TooltipContent>
                              </Tooltip>
                            </TooltipProvider>
                          )}
                        </div>
                      </div>
                      {m.role === "user" && (
                        <div className="mt-1 grid h-7 w-7 place-items-center rounded-full bg-sky-500/15 text-[10px] ring-1 ring-sky-500/30">U</div>
                      )}
                    </div>
                  ))}
                  {sending && (
                    <div className="flex w-full gap-3 animate-in slide-in-from-bottom-2 duration-300">
                      <div className="mt-1">
                        <ChatAvatar talking={true} />
                      </div>
                      <div className="max-w-[82%] rounded-2xl border border-emerald-500/20 bg-gradient-to-br from-emerald-500/5 to-teal-500/10 p-4 text-sm shadow-lg backdrop-blur-sm">
                        <div className="flex items-center gap-3 text-muted-foreground">
                          <span className="text-xs font-medium">ƒêang suy nghƒ©...</span>
                          <span className="inline-flex items-center gap-1">
                            <span className="inline-block size-1 rounded-full bg-emerald-400 animate-bounce" />
                            <span className="inline-block size-1 rounded-full bg-emerald-400 animate-bounce [animation-delay:.15s]" />
                            <span className="inline-block size-1 rounded-full bg-emerald-400 animate-bounce [animation-delay:.3s]" />
                          </span>
                        </div>
                      </div>
                    </div>
                  )}
                  <div ref={chatEndRef} />
                </div>
              </div>

              {/* Composer */}
              <div className="sticky bottom-0 border-t border-white/10 bg-background/60 p-3 backdrop-blur supports-[backdrop-filter]:bg-background/50">
                <div className="mx-auto max-w-3xl">
                  <div className="flex items-end gap-2 rounded-full border border-white/10 bg-background/80 p-1.5 shadow-sm">
                    <TooltipProvider>
                      <Tooltip>
                        <TooltipTrigger asChild>
                          <Button size="icon" variant="ghost" className="h-9 w-9 rounded-xl" onClick={onAttach} aria-label="ƒê√≠nh k√®m">
                            <Paperclip className="size-4" />
                          </Button>
                        </TooltipTrigger>
                        <TooltipContent>ƒê√≠nh k√®m</TooltipContent>
                      </Tooltip>
                    </TooltipProvider>
                    <Input type="file" className="hidden" multiple ref={fileInputRef} onChange={(e) => onUploadFiles(e.target.files)} />
                    <div className="relative flex-1">
                      <Textarea
                        value={input}
                        onChange={(e) => setInput(e.target.value)}
                        placeholder="H·ªèi t√¥i v·ªÅ Kh√°nh Duy ho·∫∑c t·∫£i t√†i li·ªáu ƒë·ªÉ ph√¢n t√≠ch..."
                        rows={2}
                        className="peer min-h-[44px] w-full resize-none rounded-full bg-black/10 px-4 py-2 outline-none ring-1 ring-white/10 focus:ring-2 focus:ring-emerald-400/50 transition"
                        onKeyDown={(e) => {
                          if (e.key === "Enter" && !e.shiftKey) {
                            e.preventDefault();
                            if (!disabled) onAsk();
                          }
                        }}
                      />
                      <div className="pointer-events-none absolute inset-0 rounded-full bg-gradient-to-r from-emerald-400/0 via-emerald-400/0 to-sky-400/0 peer-focus:from-emerald-400/10 peer-focus:to-sky-400/10" />
                    </div>
                    <Button
                      className="h-9 shrink-0 rounded-full bg-gradient-to-r from-emerald-500 to-sky-500 text-white hover:from-emerald-400 hover:to-sky-400"
                      onClick={onAsk}
                      disabled={disabled}
                    >
                      {sending ? "ƒêang g·ª≠i..." : (
                        <span className="inline-flex items-center gap-2"><Send className="size-4" /><span className="hidden sm:inline">G·ª≠i</span></span>
                      )}
                    </Button>
                  </div>
                  <div className="mt-1 pl-2 text-[11px] text-muted-foreground">Nh·∫•n Enter ƒë·ªÉ g·ª≠i ‚Ä¢ Shift+Enter ƒë·ªÉ xu·ªëng d√≤ng</div>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Tips */}
          <Card className="border-white/10">
            <CardHeader>
              <CardTitle className="text-base flex items-center gap-2"><Info className="size-4" /> G·ª£i √Ω s·ª≠ d·ª•ng</CardTitle>
              <CardDescription>M·ªôt v√†i c√¢u h·ªèi m·∫´u ƒë·ªÉ b·∫Øt ƒë·∫ßu.</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="flex flex-wrap gap-2">
                {[
                  "K·ªÉ v·ªÅ kinh nghi·ªám l√†m vi·ªác c·ªßa Kh√°nh Duy",
                  "K·ªπ nƒÉng chuy√™n m√¥n c·ªßa Kh√°nh Duy l√† g√¨?",
                  "D·ª± √°n n√†o Kh√°nh Duy t·ª± h√†o nh·∫•t?",
                ].map((s, i) => (
                  <Button key={i} size="sm" variant="outline" className="bg-white/5 hover:bg-white/10 border-white/20 backdrop-blur-sm transition-all duration-200" onClick={() => setInput(s)}>
                    <Quote className="mr-2 size-4" /> {s}
                  </Button>
                ))}
              </div>
            </CardContent>
          </Card> 
        </div>
      </div>
    </div>
  );
}

function ChatAvatar({ talking = false }: { talking?: boolean }) {
  return (
    <div className="relative h-7 w-7 shrink-0 rounded-full bg-emerald-500/15 ring-1 ring-emerald-500/30 grid place-items-center overflow-hidden">
      <svg viewBox="0 0 40 40" className="h-6 w-6">
        <circle cx="20" cy="20" r="18" fill="transparent" stroke="currentColor" strokeOpacity="0.25" />
        {/* eyes */}
        <circle cx="14" cy="17" r="2" fill="currentColor" />
        <circle cx="26" cy="17" r="2" fill="currentColor" />
        {/* mouth */}
        <rect x="14" y="24" width="12" height="3" rx="1.5" className={talking ? "fill-current animate-pulse" : "fill-current"} />
      </svg>
    </div>
  );
}

function CodeBlock({ inline, className, children, onCopy }: { inline?: boolean; className?: string; children: any; onCopy: (code: string) => void }) {
  const match = /language-(\w+)/.exec(className || "");
  const codeText = String(children || "").trim();
  if (inline) {
    return <code className="rounded bg-muted/30 px-1 py-0.5 text-[0.85em]">{children}</code>;
  }
  return (
    <div className="group relative">
      <div className="absolute right-2 top-2 z-10 flex items-center gap-1">
        <TooltipProvider>
          <Tooltip>
            <TooltipTrigger asChild>
              <Button
                size="icon"
                variant="ghost"
                className="h-7 w-7"
                onClick={() => onCopy(codeText)}
              >
                <Copy className="size-4" />
              </Button>
            </TooltipTrigger>
            <TooltipContent side="left">Sao ch√©p</TooltipContent>
          </Tooltip>
        </TooltipProvider>
      </div>
      {match && <div className="absolute left-2 top-2 z-10 rounded-md border border-white/10 bg-background/80 px-2 py-0.5 text-[10px] uppercase tracking-wide text-muted-foreground">{match[1]}</div>}
      <pre className="mt-6 overflow-auto rounded-lg border border-white/10 p-3 text-sm">
        <code className={className}>{children}</code>
      </pre>
    </div>
  );
}
